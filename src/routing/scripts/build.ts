/**
 * @license
 * Copyright ContextJS All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found at https://github.com/contextjs/context/blob/main/LICENSE
 */

import path from 'path';
import type PackageInfo from '../../../scripts/package-info.ts';
import Script from '../../../scripts/script.ts';

export class Build extends Script {
    private readonly packageInfo: PackageInfo = { name: "routing" };
    private targetDir = path.resolve("src", "context", "src", "transformers");

    public override async runAsync(): Promise<void> {
        await this.copyDeclarationsFileAsync(this.packageInfo);
        await this.copyReadmeFileAsync(this.packageInfo);
        await this.executeCommandAsync(`cd src/${this.packageInfo.name} && tsc`);
        await this.copyTransformersToContext();
        await this.generateCompilerExtension();
    }

    private async generateCompilerExtension(): Promise<void> {
        const file = `/**
     * @license
     * Copyright ContextJS All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found at https://github.com/contextjs/context/blob/main/LICENSE
     *
     *
     * Auto-generated by @contextjs/routing build script.
     */
    
    import typescript from "typescript";
    import { routeDiscoveryTransformer } from "./route-discovery.transformer.js";
    import { stripDecoratorsTransformer } from "./strip-decorators.transformer.js";

    export default {
        name: "@contextjs/routing",
        getTransformers(program: typescript.Program) {
            return {
                before: [
                    routeDiscoveryTransformer(program)
                ],
                after: [
                    stripDecoratorsTransformer()
                ]
            };
        }
    };`;
        const outputPath = path.join(this.targetDir, "routing-extension.ts");
        await this.writeFileAsync(outputPath, file);
    }

    private async copyTransformersToContext(): Promise<void> {

        await this.createDirectoryAsync(this.targetDir);

        await this.copyFileAsync(
            "src/routing/scripts/transformers/route-discovery.transformer.ts",
            path.join(this.targetDir, "route-discovery.transformer.ts")
        );

        await this.copyFileAsync(
            "src/routing/scripts/transformers/strip-decorators.transformer.ts",
            path.join(this.targetDir, "strip-decorators.transformer.ts")
        );
    }
}

await new Build().runAsync();